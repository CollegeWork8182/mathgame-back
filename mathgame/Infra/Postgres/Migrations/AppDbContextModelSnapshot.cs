// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using mathgame.Infra;

#nullable disable

namespace mathgame.Infra.Postgres.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParticipantEntityRoomEntity", b =>
                {
                    b.Property<long>("ParticipantsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoomsId")
                        .HasColumnType("bigint");

                    b.HasKey("ParticipantsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("Room_Participants", (string)null);
                });

            modelBuilder.Entity("mathgame.Entities.AccessCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ExperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserUpdatePassword")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("mathgame.Entities.DifficultyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("mathgame.Entities.OperationDifficultiesEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DifficultyId")
                        .HasColumnType("bigint");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("OperationId");

                    b.ToTable("Operation_Difficulties", (string)null);
                });

            modelBuilder.Entity("mathgame.Entities.OperationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("mathgame.Entities.ParticipantEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QtdResponses")
                        .HasColumnType("bigint");

                    b.Property<long>("Score")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("mathgame.Entities.ProfileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("mathgame.Entities.QuestionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CorrectOption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("OperationDifficultiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Option1")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Option2")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Option3")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OperationDifficultiesId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("mathgame.Entities.ResponseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Correct")
                        .HasColumnType("boolean");

                    b.Property<bool>("Incorrect")
                        .HasColumnType("boolean");

                    b.Property<long>("ParticipantId")
                        .HasColumnType("bigint");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("mathgame.Entities.RoomEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("OperationDifficultiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationDifficultiesId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("mathgame.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<long>("ProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParticipantEntityRoomEntity", b =>
                {
                    b.HasOne("mathgame.Entities.ParticipantEntity", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mathgame.Entities.RoomEntity", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("mathgame.Entities.AccessCodeEntity", b =>
                {
                    b.HasOne("mathgame.Entities.UserEntity", "User")
                        .WithOne("AccessCode")
                        .HasForeignKey("mathgame.Entities.AccessCodeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("mathgame.Entities.OperationDifficultiesEntity", b =>
                {
                    b.HasOne("mathgame.Entities.DifficultyEntity", "Difficulty")
                        .WithMany("OperationDifficulties")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mathgame.Entities.OperationEntity", "Operation")
                        .WithMany("OperationDifficulties")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("mathgame.Entities.ParticipantEntity", b =>
                {
                    b.HasOne("mathgame.Entities.UserEntity", "User")
                        .WithOne("Participant")
                        .HasForeignKey("mathgame.Entities.ParticipantEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("mathgame.Entities.QuestionEntity", b =>
                {
                    b.HasOne("mathgame.Entities.OperationDifficultiesEntity", "OperationDifficulties")
                        .WithMany("Questions")
                        .HasForeignKey("OperationDifficultiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationDifficulties");
                });

            modelBuilder.Entity("mathgame.Entities.ResponseEntity", b =>
                {
                    b.HasOne("mathgame.Entities.ParticipantEntity", "Participant")
                        .WithMany("Responses")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("mathgame.Entities.QuestionEntity", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Participant");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("mathgame.Entities.RoomEntity", b =>
                {
                    b.HasOne("mathgame.Entities.OperationDifficultiesEntity", "OperationDifficulties")
                        .WithOne("Room")
                        .HasForeignKey("mathgame.Entities.RoomEntity", "OperationDifficultiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mathgame.Entities.UserEntity", "User")
                        .WithMany("Rooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationDifficulties");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mathgame.Entities.UserEntity", b =>
                {
                    b.HasOne("mathgame.Entities.ProfileEntity", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("mathgame.Entities.DifficultyEntity", b =>
                {
                    b.Navigation("OperationDifficulties");
                });

            modelBuilder.Entity("mathgame.Entities.OperationDifficultiesEntity", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("mathgame.Entities.OperationEntity", b =>
                {
                    b.Navigation("OperationDifficulties");
                });

            modelBuilder.Entity("mathgame.Entities.ParticipantEntity", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("mathgame.Entities.ProfileEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("mathgame.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("mathgame.Entities.UserEntity", b =>
                {
                    b.Navigation("AccessCode")
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
